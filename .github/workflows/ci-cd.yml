name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Chạy khi push lên main
  pull_request:
    branches:
      - main # Chạy khi có PR vào main

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Máy ảo chạy workflow

    steps:
      # 1. Checkout code từ repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.0" # Phiên bản Go trong Dockerfile của mày

      # 3. Install dependencies
      - name: Install dependencies
        run: go mod download

      # 4. Build Go app (kiểm tra lỗi build)
      - name: Build Go app
        run: go build -o gin_app

      # 5. (Tùy chọn) Chạy unit test nếu có
      # - name: Run tests
      #   run: go test ./... -v

      # 6. Set up Docker Buildx (hỗ trợ build multi-platform nếu cần)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 7. Login vào Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8. Build và push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true # Push lên Docker Hub
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/simple-api-go:latest
            ${{ secrets.DOCKER_USERNAME }}/simple-api-go:${{ github.sha }}
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            mkdir -p ~/simple-api-go
            cd ~/simple-api-go


            echo "${{ secrets.ENV_FILE }}" > .env

            # Ghi docker-compose.yml
            cat << 'EOF' > docker-compose.yml
            version: "3.8"
            services:
              app:
                image: ${{ secrets.DOCKER_USERNAME }}/simple-api-go:latest
                container_name: gin_app
                ports:
                  - "8080:8080"
                depends_on:
                  db:
                    condition: service_healthy
                  redis:
                    condition: service_started
                env_file:
                  - .env
                networks:
                  - backend
              db:
                image: postgres:15
                container_name: go_gin_pgdb
                restart: always
                env_file:
                  - .env 
                environment:
                  - POSTGRES_USER=${DB_USER}
                  - POSTGRES_PASSWORD=${DB_PASS}
                  - POSTGRES_DB=${DB_NAME}
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
                  interval: 5s
                  timeout: 5s
                  retries: 5
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                networks:
                  - backend
              redis:
                image: redis:latest
                container_name: go_gin_redis
                restart: always
                networks:
                  - backend
            networks:
              backend:
                driver: bridge
            volumes:
              postgres_data:
            EOF


            docker-compose pull
            docker-compose up -d --remove-orphans
